{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HelperBot","text":"<p>Welcome to HelperBot, your interactive learning companion powered by Gemini AI.</p> <p></p>"},{"location":"#features","title":"Features","text":""},{"location":"#1-api-integration","title":"1. API Integration","text":"<p>Easily integrate with Gemini AI by obtaining your API key from Google AI and adding it to the <code>.env</code> file. This seamless connection allows HelperBot to tap into the power of artificial intelligence, making your chatbot experience dynamic and responsive.</p>"},{"location":"#2-multiple-sessions","title":"2. Multiple Sessions","text":"<p>HelperBot supports the creation of multiple chat sessions. Whether you're discussing different topics, assisting various users, or simply exploring, each session is distinct and adaptable. Keep track of your interactions effortlessly.</p>"},{"location":"#3-export-to-pdf","title":"3. Export to PDF","text":"<p>Need a record of your chat sessions? No problem! HelperBot provides a convenient export functionality. Capture your conversations in PDF format for future reference, sharing, or archiving. It's like having a digital diary at your fingertips.</p>"},{"location":"#installation-steps","title":"Installation Steps","text":"<p>Follow these steps to get started:</p> <ol> <li>Generate your API key from Google AI</li> <li>Clone this repository using <code>git clone https://github.com/shakya1527/HelperBot.git</code></li> <li>Create a <code>.env</code> file and add your API key.</li> <li>Install the required packages with <code>pip install -r requirements.txt</code>.</li> <li>Run the Streamlit app using <code>streamlit run .\\src\\project\\__init__.py</code>.</li> </ol>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>HelperBot owes its existence to the following components:</p> <ol> <li>Python: The versatile programming language that forms the backbone of this project.</li> <li>Streamlit: The user-friendly framework that transforms code into interactive web applications.</li> <li>Gemini AI: The brilliant artificial intelligence engine that powers HelperBot's responses.</li> <li>Mdpdf: The tool responsible for exporting chat sessions to PDF, ensuring your conversations are preserved.</li> </ol>"},{"location":"#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Shakya\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>project<ul> <li>Main</li> <li>database<ul> <li>Emoji</li> <li>Interface</li> <li>Repository</li> <li>Session</li> <li>utils</li> </ul> </li> <li>export<ul> <li>MarkdownToPdf</li> </ul> </li> <li>gemini<ul> <li>Gemini</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/project/Main/","title":"Main","text":""},{"location":"reference/project/Main/#project.Main.about_section","title":"<code>about_section(container, database, export)</code>","text":"<p>Function to create the about section.</p> <p>Parameters:</p> <ul> <li> <code>container</code>             (<code>streamlit.container</code>)         \u2013          <p>Parent Container or where the content will be displayed.</p> </li> <li> <code>database</code>             (<code>database.Repository.ChatRepositoryImp</code>)         \u2013          <p>Chat Repository object</p> </li> <li> <code>export</code>             (<code>export.MarkdownToPdf.Export</code>)         \u2013          <p>Export object</p> </li> </ul> Source code in <code>src/project/Main.py</code> <pre><code>def about_section(container: st.container, database: ChatRepositoryImp, export: Export):\n    \"\"\"Function to create the about section.\n\n    Args:\n        container (st.container): Parent Container or where the content will be displayed.\n        database (ChatRepositoryImp): Chat Repository object\n        export (Export): Export object\n    \"\"\"\n    with st.expander(\"About\", expanded=True) as e:\n        st.title('HelperBot')\n        st.write('Welcome to HelperBot')\n        st.button('\u2795 New Chat', key='new-chat', on_click=database.create_new_session, use_container_width=True,\n                  disabled=len(database.get_current().get_messages()) == 0\n                  )\n        st.button('Export to PDF', key='export-pdf', use_container_width=True,\n                  on_click=export.export_to_pdf,\n                  args=[convert_to_markdown(copy.deepcopy(database.get_current())), container,\n                        copy.deepcopy(database.get_current()).get_session_name() + '.pdf'],\n                  disabled=len(database.get_current().get_messages()) == 0\n                  )\n</code></pre>"},{"location":"reference/project/Main/#project.Main.acknowledgements_sec","title":"<code>acknowledgements_sec()</code>","text":"<p>Acknowledgements section.</p> Source code in <code>src/project/Main.py</code> <pre><code>def acknowledgements_sec():\n    \"\"\"Acknowledgements section.\n    \"\"\"\n    with st.expander('Acknowledgements', expanded=False):\n        st.link_button('Source Code', url=Links.GITHUB.value, use_container_width=True)\n        with st.container(border=True):\n            st.image('src/project/img/female.png', width=80)\n            st.subheader('Shakya', divider=True)\n            st.link_button('Github', url=Links.SHAKYA.value, use_container_width=True)\n        with st.container():\n            st.caption('This project is made using:')\n            st.link_button('Streamlit', url=Links.STREAMLIT.value, use_container_width=True)\n            st.link_button('Python', url=Links.PYTHON.value, use_container_width=True)\n            st.link_button('Gemini Ai', url=Links.GEMINI.value, use_container_width=True)\n            st.link_button('MdPdf', url=Links.MD_PDF.value, use_container_width=True)\n</code></pre>"},{"location":"reference/project/Main/#project.Main.his_section","title":"<code>his_section(database, gemini)</code>","text":"<p>Function to create the history section.</p> <p>Parameters:</p> <ul> <li> <code>database</code>             (<code>database.Repository.ChatRepositoryImp</code>)         \u2013          <p>Chat Repository object.</p> </li> <li> <code>gemini</code>             (<code>gemini.Gemini</code>)         \u2013          <p>Gemini object.</p> </li> </ul> Source code in <code>src/project/Main.py</code> <pre><code>def his_section(database: ChatRepositoryImp, gemini: Gemini):\n    \"\"\"Function to create the history section.\n\n    Args:\n        database (ChatRepositoryImp): Chat Repository object.\n        gemini (Gemini): Gemini object.\n    \"\"\"\n    with st.expander('History', expanded=True):\n        st.subheader('All history')\n        for session in reversed(get_value_from_state(State.SESSION_LIST_STATE.value)):\n            st.button(session.get_session_name(), key=session.get_session_id,\n                      on_click=populate_messages, args=[session.get_session_id(), database, gemini, ])\n</code></pre>"},{"location":"reference/project/Main/#project.Main.message_container","title":"<code>message_container(message)</code>","text":"<p>Function to create a message container.</p> <p>Parameters:</p> <ul> <li> <code>message</code>             (<code>database.Session.Message</code>)         \u2013          <p>Message object</p> </li> </ul> Source code in <code>src/project/Main.py</code> <pre><code>def message_container(message: Message):\n    \"\"\"Function to create a message container.\n\n    Args:\n        message (Message): Message object\n    \"\"\"\n    if message.get_role() == Role.MODEL:\n        with st.chat_message('AI'):\n            st.markdown(message.get_content(), unsafe_allow_html=True)\n    else:\n        with st.chat_message('User'):\n            st.markdown(message.get_content(), unsafe_allow_html=True)\n</code></pre>"},{"location":"reference/project/Main/#project.Main.populate_messages","title":"<code>populate_messages(session_id, database, gemini)</code>","text":"<p>Function to populate the messages.</p> <p>Parameters:</p> <ul> <li> <code>session_id</code>             (<code>int</code>)         \u2013          <p>Current session id</p> </li> <li> <code>database</code>             (<code>database.Repository.ChatRepositoryImp</code>)         \u2013          <p>Database object</p> </li> <li> <code>gemini</code>             (<code>gemini.Gemini</code>)         \u2013          <p>Gemini object</p> </li> </ul> Source code in <code>src/project/Main.py</code> <pre><code>def populate_messages(session_id: int, database: ChatRepositoryImp, gemini: Gemini):\n    \"\"\"Function to populate the messages.\n\n    Args:\n        session_id (int): Current session id\n        database (ChatRepositoryImp): Database object\n        gemini (Gemini): Gemini object\n    \"\"\"\n    database.get_current_session(session_id)\n    gemini.start_new_chat(database.get_current().get_messages())\n</code></pre>"},{"location":"reference/project/Main/#project.Main.progress_message_in_other_thread","title":"<code>progress_message_in_other_thread(input_message, database, gemini)</code>","text":"<p>Function to process the message in another thread.</p> <p>Parameters:</p> <ul> <li> <code>input_message</code>             (<code>str</code>)         \u2013          <p>Input from user.</p> </li> <li> <code>database</code>             (<code>database.Repository.ChatRepositoryImp</code>)         \u2013          <p>Chat Repository object.</p> </li> <li> <code>gemini</code>             (<code>gemini.Gemini</code>)         \u2013          <p>Gemini object.</p> </li> </ul> Source code in <code>src/project/Main.py</code> <pre><code>def progress_message_in_other_thread(input_message: str, database: ChatRepositoryImp, gemini: Gemini):\n    \"\"\" Function to process the message in another thread.\n\n    Args:\n        input_message (str): Input from user.\n        database (ChatRepositoryImp): Chat Repository object.\n        gemini (Gemini): Gemini object.\n    \"\"\"\n    response = gemini.send_message(input_message, Role.USER)\n    database.add_message(response.get_content(), Role.MODEL)\n</code></pre>"},{"location":"reference/project/Main/#project.Main.thinking","title":"<code>thinking(input_message, _database, _gemini)</code>","text":"<p>Function to process the message in an async manner.</p> <p>Parameters:</p> <ul> <li> <code>input_message</code>             (<code>str</code>)         \u2013          <p>Input from user.</p> </li> <li> <code>_database</code>             (<code>database.Repository.ChatRepositoryImp</code>)         \u2013          <p>Chat Repository object.</p> </li> <li> <code>_gemini</code>             (<code>gemini.Gemini</code>)         \u2013          <p>Gemini object.</p> </li> </ul> Source code in <code>src/project/Main.py</code> <pre><code>@st.cache_data()\ndef thinking(input_message: str, _database: ChatRepositoryImp, _gemini: Gemini):\n    \"\"\"Function to process the message in an async manner.\n\n    Args:\n        input_message (str): Input from user.\n        _database (ChatRepositoryImp): Chat Repository object.\n        _gemini (Gemini): Gemini object.\n    \"\"\"\n\n    thread = threading.Thread(target=progress_message_in_other_thread, args=(input_message, _database, _gemini))\n    add_script_run_ctx(thread)\n    thread.start()\n    thread.join()\n    st.rerun()\n</code></pre>"},{"location":"reference/project/__init__/","title":"project","text":"<p>This module is the main entry point for the Streamlit app. It contains the main logic for the Streamlit app.</p> Note <p>The module imports the necessary classes and functions from the project package.</p>"},{"location":"reference/project/__init__/#project.database","title":"<code>database: ChatRepositoryImp = create_or_update_session(State.CHAT_REPOSITORY.value, init_value=ChatRepositoryImp())</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/__init__/#project.export","title":"<code>export: Export = create_or_update_session(State.EXPORT.value, init_value=Export())</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/__init__/#project.gemini","title":"<code>gemini: Gemini = create_or_update_session(State.GEMINI.value, init_value=Gemini())</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/database/Emoji/","title":"Emoji","text":""},{"location":"reference/project/database/Emoji/#project.database.Emoji.Emoji","title":"<code>Emoji</code>","text":"<p>Class to get a random emoji from a list of emojis</p> Source code in <code>src/project/database/Emoji.py</code> <pre><code>class Emoji:\n    \"\"\"Class to get a random emoji from a list of emojis\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor to initialize the list of emojis\n        \"\"\"\n        self.emojis = [\n            \"\ud83d\ude00\", \"\ud83d\ude03\", \"\ud83d\ude04\", \"\ud83d\ude01\", \"\ud83d\ude06\", \"\ud83d\ude05\", \"\ud83d\ude02\", \"\ud83e\udd23\", \"\ud83d\ude0a\", \"\ud83d\ude07\",\n            \"\ud83d\ude42\", \"\ud83d\ude43\", \"\ud83d\ude09\", \"\ud83d\ude0c\", \"\ud83d\ude0d\", \"\ud83e\udd70\", \"\ud83d\ude18\", \"\ud83d\ude17\", \"\ud83d\ude19\", \"\ud83d\ude1a\",\n            \"\ud83d\ude0b\", \"\ud83d\ude1b\", \"\ud83d\ude1c\", \"\ud83e\udd2a\", \"\ud83d\ude1d\", \"\ud83e\udd11\", \"\ud83e\udd17\", \"\ud83e\udd2d\", \"\ud83e\udd2b\", \"\ud83e\udd14\",\n            \"\ud83e\udd10\", \"\ud83e\udd28\", \"\ud83d\ude10\", \"\ud83d\ude11\", \"\ud83d\ude36\", \"\ud83d\ude0f\", \"\ud83d\ude12\", \"\ud83d\ude44\", \"\ud83d\ude2c\", \"\ud83d\ude2e\",\n            \"\ud83d\ude2f\", \"\ud83d\ude33\", \"\ud83e\udd2f\", \"\ud83d\ude30\", \"\ud83d\ude28\", \"\ud83d\ude23\", \"\ud83d\ude22\", \"\ud83d\ude2d\", \"\ud83d\ude31\", \"\ud83d\ude16\",\n            \"\ud83d\ude15\", \"\ud83d\ude14\", \"\ud83d\ude1e\", \"\ud83d\ude1f\", \"\ud83d\ude24\", \"\ud83d\ude22\", \"\ud83d\ude2d\", \"\ud83d\ude26\", \"\ud83d\ude27\", \"\ud83d\ude28\",\n            \"\ud83d\ude29\", \"\ud83e\udd2f\", \"\ud83d\ude2c\", \"\ud83d\ude30\", \"\ud83d\ude31\", \"\ud83d\ude33\", \"\ud83e\udd2a\", \"\ud83d\ude35\", \"\ud83e\udd74\", \"\ud83d\ude20\",\n            \"\ud83d\ude21\", \"\ud83e\udd2c\", \"\ud83d\ude37\", \"\ud83e\udd12\", \"\ud83e\udd15\", \"\ud83e\udd22\", \"\ud83e\udd2e\", \"\ud83e\udd27\", \"\ud83d\ude07\", \"\ud83e\udd20\",\n            \"\ud83e\udd21\", \"\ud83e\udd73\", \"\ud83e\udd74\", \"\ud83e\udd7a\", \"\ud83e\udd25\", \"\ud83e\udd2b\", \"\ud83e\udd2d\", \"\ud83e\uddd0\", \"\ud83e\udd13\", \"\ud83d\ude08\",\n            \"\ud83d\udc7f\", \"\ud83d\udc79\", \"\ud83d\udc7a\", \"\ud83d\udc80\", \"\ud83d\udc7b\", \"\ud83d\udc7d\", \"\ud83d\udc7e\", \"\ud83e\udd16\", \"\ud83d\udca9\", \"\ud83d\ude3a\",\n            \"\ud83d\ude38\", \"\ud83d\ude39\", \"\ud83d\ude3b\", \"\ud83d\ude3c\", \"\ud83d\ude3d\", \"\ud83d\ude40\", \"\ud83d\ude3f\", \"\ud83d\ude3e\"\n        ]\n\n    def get_random_emoji(self):\n        \"\"\"Method to get a random emoji from the list\n\n        Returns:\n            str: Random emoji from the list\n        \"\"\"\n        return random.choice(self.emojis)\n</code></pre>"},{"location":"reference/project/database/Emoji/#project.database.Emoji.Emoji.__init__","title":"<code>__init__()</code>","text":"<p>Constructor to initialize the list of emojis</p> Source code in <code>src/project/database/Emoji.py</code> <pre><code>def __init__(self):\n    \"\"\"Constructor to initialize the list of emojis\n    \"\"\"\n    self.emojis = [\n        \"\ud83d\ude00\", \"\ud83d\ude03\", \"\ud83d\ude04\", \"\ud83d\ude01\", \"\ud83d\ude06\", \"\ud83d\ude05\", \"\ud83d\ude02\", \"\ud83e\udd23\", \"\ud83d\ude0a\", \"\ud83d\ude07\",\n        \"\ud83d\ude42\", \"\ud83d\ude43\", \"\ud83d\ude09\", \"\ud83d\ude0c\", \"\ud83d\ude0d\", \"\ud83e\udd70\", \"\ud83d\ude18\", \"\ud83d\ude17\", \"\ud83d\ude19\", \"\ud83d\ude1a\",\n        \"\ud83d\ude0b\", \"\ud83d\ude1b\", \"\ud83d\ude1c\", \"\ud83e\udd2a\", \"\ud83d\ude1d\", \"\ud83e\udd11\", \"\ud83e\udd17\", \"\ud83e\udd2d\", \"\ud83e\udd2b\", \"\ud83e\udd14\",\n        \"\ud83e\udd10\", \"\ud83e\udd28\", \"\ud83d\ude10\", \"\ud83d\ude11\", \"\ud83d\ude36\", \"\ud83d\ude0f\", \"\ud83d\ude12\", \"\ud83d\ude44\", \"\ud83d\ude2c\", \"\ud83d\ude2e\",\n        \"\ud83d\ude2f\", \"\ud83d\ude33\", \"\ud83e\udd2f\", \"\ud83d\ude30\", \"\ud83d\ude28\", \"\ud83d\ude23\", \"\ud83d\ude22\", \"\ud83d\ude2d\", \"\ud83d\ude31\", \"\ud83d\ude16\",\n        \"\ud83d\ude15\", \"\ud83d\ude14\", \"\ud83d\ude1e\", \"\ud83d\ude1f\", \"\ud83d\ude24\", \"\ud83d\ude22\", \"\ud83d\ude2d\", \"\ud83d\ude26\", \"\ud83d\ude27\", \"\ud83d\ude28\",\n        \"\ud83d\ude29\", \"\ud83e\udd2f\", \"\ud83d\ude2c\", \"\ud83d\ude30\", \"\ud83d\ude31\", \"\ud83d\ude33\", \"\ud83e\udd2a\", \"\ud83d\ude35\", \"\ud83e\udd74\", \"\ud83d\ude20\",\n        \"\ud83d\ude21\", \"\ud83e\udd2c\", \"\ud83d\ude37\", \"\ud83e\udd12\", \"\ud83e\udd15\", \"\ud83e\udd22\", \"\ud83e\udd2e\", \"\ud83e\udd27\", \"\ud83d\ude07\", \"\ud83e\udd20\",\n        \"\ud83e\udd21\", \"\ud83e\udd73\", \"\ud83e\udd74\", \"\ud83e\udd7a\", \"\ud83e\udd25\", \"\ud83e\udd2b\", \"\ud83e\udd2d\", \"\ud83e\uddd0\", \"\ud83e\udd13\", \"\ud83d\ude08\",\n        \"\ud83d\udc7f\", \"\ud83d\udc79\", \"\ud83d\udc7a\", \"\ud83d\udc80\", \"\ud83d\udc7b\", \"\ud83d\udc7d\", \"\ud83d\udc7e\", \"\ud83e\udd16\", \"\ud83d\udca9\", \"\ud83d\ude3a\",\n        \"\ud83d\ude38\", \"\ud83d\ude39\", \"\ud83d\ude3b\", \"\ud83d\ude3c\", \"\ud83d\ude3d\", \"\ud83d\ude40\", \"\ud83d\ude3f\", \"\ud83d\ude3e\"\n    ]\n</code></pre>"},{"location":"reference/project/database/Emoji/#project.database.Emoji.Emoji.get_random_emoji","title":"<code>get_random_emoji()</code>","text":"<p>Method to get a random emoji from the list</p> <p>Returns:</p> <ul> <li> <code>str</code>        \u2013          <p>Random emoji from the list</p> </li> </ul> Source code in <code>src/project/database/Emoji.py</code> <pre><code>def get_random_emoji(self):\n    \"\"\"Method to get a random emoji from the list\n\n    Returns:\n        str: Random emoji from the list\n    \"\"\"\n    return random.choice(self.emojis)\n</code></pre>"},{"location":"reference/project/database/Interface/","title":"Interface","text":""},{"location":"reference/project/database/Interface/#project.database.Interface.ChatRepository","title":"<code>ChatRepository</code>","text":"<p>             Bases: <code>abc.ABC</code></p> <p>Interface for the ChatRepository class,Defines the methods that the ChatRepository class should implement.</p> <p>Parameters:</p> <ul> <li> <code>ABC</code>             (<code>abc.ABC</code>)         \u2013          <p>Abstract Base Class</p> </li> </ul> Source code in <code>src/project/database/Interface.py</code> <pre><code>class ChatRepository(ABC):\n    \"\"\"Interface for the ChatRepository class,Defines the methods that the ChatRepository class should implement.\n\n    Args:\n        ABC (ABC): Abstract Base Class\n    \"\"\"\n\n    @abstractmethod\n    def create_new_session(self):\n        \"\"\"Method to create a new session.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_all_session(self):\n        \"\"\"Method to get all the sessions.\n        Returns:\n            list: List of all the sessions\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_current(self):\n        \"\"\"Method to create a new session.\n        Returns:\n            Session: Current session\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_current_session(self, session_id: int):\n        \"\"\"Method to get session by id\n\n        Args:\n            session_id (int): Session id\n        Returns:\n            Session: Session with the given id\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def add_message(self, message: str, role: Role):\n        \"\"\"_summary_\n\n        Args:\n            message (str): Message to be added\n            role (Role): Role of the user\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/project/database/Interface/#project.database.Interface.ChatRepository.add_message","title":"<code>add_message(message, role)</code>  <code>abstractmethod</code>","text":"<p>summary</p> <p>Parameters:</p> <ul> <li> <code>message</code>             (<code>str</code>)         \u2013          <p>Message to be added</p> </li> <li> <code>role</code>             (<code>database.Session.Role</code>)         \u2013          <p>Role of the user</p> </li> </ul> Source code in <code>src/project/database/Interface.py</code> <pre><code>@abstractmethod\ndef add_message(self, message: str, role: Role):\n    \"\"\"_summary_\n\n    Args:\n        message (str): Message to be added\n        role (Role): Role of the user\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/project/database/Interface/#project.database.Interface.ChatRepository.create_new_session","title":"<code>create_new_session()</code>  <code>abstractmethod</code>","text":"<p>Method to create a new session.</p> Source code in <code>src/project/database/Interface.py</code> <pre><code>@abstractmethod\ndef create_new_session(self):\n    \"\"\"Method to create a new session.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/project/database/Interface/#project.database.Interface.ChatRepository.get_all_session","title":"<code>get_all_session()</code>  <code>abstractmethod</code>","text":"<p>Method to get all the sessions. Returns:     list: List of all the sessions</p> Source code in <code>src/project/database/Interface.py</code> <pre><code>@abstractmethod\ndef get_all_session(self):\n    \"\"\"Method to get all the sessions.\n    Returns:\n        list: List of all the sessions\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/project/database/Interface/#project.database.Interface.ChatRepository.get_current","title":"<code>get_current()</code>  <code>abstractmethod</code>","text":"<p>Method to create a new session. Returns:     Session: Current session</p> Source code in <code>src/project/database/Interface.py</code> <pre><code>@abstractmethod\ndef get_current(self):\n    \"\"\"Method to create a new session.\n    Returns:\n        Session: Current session\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/project/database/Interface/#project.database.Interface.ChatRepository.get_current_session","title":"<code>get_current_session(session_id)</code>  <code>abstractmethod</code>","text":"<p>Method to get session by id</p> <p>Parameters:</p> <ul> <li> <code>session_id</code>             (<code>int</code>)         \u2013          <p>Session id</p> </li> </ul> <p>Returns:     Session: Session with the given id</p> Source code in <code>src/project/database/Interface.py</code> <pre><code>@abstractmethod\ndef get_current_session(self, session_id: int):\n    \"\"\"Method to get session by id\n\n    Args:\n        session_id (int): Session id\n    Returns:\n        Session: Session with the given id\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/project/database/Repository/","title":"Repository","text":""},{"location":"reference/project/database/Repository/#project.database.Repository.ChatRepositoryImp","title":"<code>ChatRepositoryImp</code>","text":"<p>             Bases: <code>database.Interface.ChatRepository</code></p> <p>Class to implement the ChatRepository interface.</p> <p>Parameters:</p> <ul> <li> <code>ChatRepository</code>             (<code>database.Interface.ChatRepository</code>)         \u2013          <p>Parent class</p> </li> </ul> Source code in <code>src/project/database/Repository.py</code> <pre><code>class ChatRepositoryImp(ChatRepository):\n    \"\"\"Class to implement the ChatRepository interface.\n\n    Args:\n        ChatRepository (ChatRepository): Parent class\n    \"\"\"\n\n    def __init__(self):\n        self.__session_list = create_or_update_session(State.SESSION_LIST_STATE.value, [Session()])\n        self.__current_session: Session = create_or_update_session(State.CURRENT_SESSION.value,\n                                                                   get_value_from_state(State.SESSION_LIST_STATE.value)[\n                                                                       0])\n\n    def create_new_session(self):\n        session = self.__session_list\n        session.append(Session())\n        create_or_update_session(State.SESSION_LIST_STATE.value, updated_value=session)\n        create_or_update_session(State.CURRENT_SESSION.value, updated_value=session[-1])\n        print('Session Created', get_value_from_state(State.CURRENT_SESSION.value).get_session_name())\n        self.__session_list = session\n        self.__current_session = session[-1]\n        print('Current Session', self.__current_session.get_session_name())\n\n    def get_all_session(self):\n        return self.__session_list\n\n    def get_current_session(self, session_id: int):\n        for session in self.__session_list:\n            if session.get_session_id() == session_id:\n                self.__current_session = session\n                create_or_update_session(\n                    State.CURRENT_SESSION.value,\n                    updated_value=self.__current_session\n                )\n                return session\n        return self.__current_session\n\n    def get_current(self) -&gt; Session:\n        return get_value_from_state(State.CURRENT_SESSION.value)\n\n    def add_message(self, message: str, role: Role):\n        messages = self.get_current().get_messages()\n        messages.append(Message(role, message))\n        self.__current_session.update_message(messages)\n        session = create_or_update_session(State.CURRENT_SESSION.value, updated_value=self.__current_session)\n        self.__current_session = session\n</code></pre>"},{"location":"reference/project/database/Repository/#project.database.Repository.State","title":"<code>State</code>","text":"<p>             Bases: <code>enum.Enum</code></p> <p>Enum to define the state keys for the session state.</p> Source code in <code>src/project/database/Repository.py</code> <pre><code>class State(Enum):\n    \"\"\"Enum to define the state keys for the session state.\n    \"\"\"\n    CHAT_REPOSITORY = 'ChatRepository'\n    GEMINI = 'Gemini'\n    EXPORT = 'Export'\n    DATABASE_STATE = 'database_state'\n    SESSION_LIST_STATE = 'session_list_state'\n    CURRENT_SESSION = 'current_session'\n    MESSAGES_LIST = 'messages_list'\n    SUMMARY_MARKDOWN = 'summary_markdown'\n</code></pre>"},{"location":"reference/project/database/Repository/#project.database.Repository.create_or_update_session","title":"<code>create_or_update_session(key, init_value=None, updated_value=None)</code>","text":"<p>Function to create or update a session state.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>any</code>)         \u2013          <p>description</p> </li> <li> <code>init_value</code>             (<code>any</code>, default:                 <code>None</code> )         \u2013          <p>Initial value. Defaults to None.</p> </li> <li> <code>updated_value</code>             (<code>any</code>, default:                 <code>None</code> )         \u2013          <p>Updated value. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>any</code>        \u2013          <p>Value of the session state</p> </li> </ul> Source code in <code>src/project/database/Repository.py</code> <pre><code>def create_or_update_session(key, init_value=None, updated_value=None):\n    \"\"\"Function to create or update a session state.\n\n    Args:\n        key (any): _description_\n        init_value (any, optional): Initial value. Defaults to None.\n        updated_value (any, optional): Updated value. Defaults to None.\n\n    Returns:\n        any: Value of the session state\n    \"\"\"\n    if key not in st.session_state and init_value is not None:\n        st.session_state[key] = init_value\n    elif key in st.session_state and updated_value is not None:\n        st.session_state[key] = updated_value\n\n    return st.session_state[key] if key in st.session_state else None\n</code></pre>"},{"location":"reference/project/database/Repository/#project.database.Repository.get_value_from_state","title":"<code>get_value_from_state(key)</code>","text":"<p>Function to get the value from the session state. Args:     key (any): Key of the session state.</p> <p>Returns:</p> <ul> <li> <code>any</code>        \u2013          <p>Value of the session state</p> </li> </ul> Source code in <code>src/project/database/Repository.py</code> <pre><code>def get_value_from_state(key):\n    \"\"\"Function to get the value from the session state.\n    Args:\n        key (any): Key of the session state.\n\n    Returns:\n        any: Value of the session state\n    \"\"\"\n    return st.session_state[key]\n</code></pre>"},{"location":"reference/project/database/Session/","title":"Session","text":""},{"location":"reference/project/database/Session/#project.database.Session.Message","title":"<code>Message</code>","text":"<p>Class to define the message. Message with contain the role and content.And further can we wrap in the session.</p> Source code in <code>src/project/database/Session.py</code> <pre><code>class Message:\n    \"\"\"Class to define the message.\n    Message with contain the role and content.And further can we wrap in the session.\n    \"\"\"\n\n    def __init__(self, role: Role = Role.MODEL, content: str = ''):\n        \"\"\"Constructor to initialize the message.\n\n        Args:\n            role (Role, optional): Role of the message. Defaults to Role.MODEL.\n            content (str, optional): Content of the message. Defaults to ''.\n        \"\"\"\n        self.__role = role\n        self.__content = content\n        self.__time_stamp = current_milli_time()\n\n    def get_role(self) -&gt; Role:\n        \"\"\"Get the role of the message.\n\n        Returns:\n            Role: Role of the message\n        \"\"\"\n        return self.__role\n\n    def get_content(self) -&gt; str:\n        \"\"\"Get the content of the message.\n\n        Returns:\n            str: Content of the message\n        \"\"\"\n        return self.__content\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Message.__init__","title":"<code>__init__(role=Role.MODEL, content='')</code>","text":"<p>Constructor to initialize the message.</p> <p>Parameters:</p> <ul> <li> <code>role</code>             (<code>project.database.Session.Role</code>, default:                 <code>project.database.Session.Role.MODEL</code> )         \u2013          <p>Role of the message. Defaults to Role.MODEL.</p> </li> <li> <code>content</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Content of the message. Defaults to ''.</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def __init__(self, role: Role = Role.MODEL, content: str = ''):\n    \"\"\"Constructor to initialize the message.\n\n    Args:\n        role (Role, optional): Role of the message. Defaults to Role.MODEL.\n        content (str, optional): Content of the message. Defaults to ''.\n    \"\"\"\n    self.__role = role\n    self.__content = content\n    self.__time_stamp = current_milli_time()\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Message.get_content","title":"<code>get_content()</code>","text":"<p>Get the content of the message.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Content of the message</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def get_content(self) -&gt; str:\n    \"\"\"Get the content of the message.\n\n    Returns:\n        str: Content of the message\n    \"\"\"\n    return self.__content\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Message.get_role","title":"<code>get_role()</code>","text":"<p>Get the role of the message.</p> <p>Returns:</p> <ul> <li> <code>Role</code> (            <code>project.database.Session.Role</code> )        \u2013          <p>Role of the message</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def get_role(self) -&gt; Role:\n    \"\"\"Get the role of the message.\n\n    Returns:\n        Role: Role of the message\n    \"\"\"\n    return self.__role\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Role","title":"<code>Role</code>","text":"<p>             Bases: <code>enum.Enum</code></p> <p>Enum to define the role of the message.</p> Source code in <code>src/project/database/Session.py</code> <pre><code>class Role(Enum):\n    \"\"\"\n    Enum to define the role of the message.\n    \"\"\"\n    MODEL = 0\n    USER = 1\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Session","title":"<code>Session</code>","text":"<p>Class to define the session. Session act as a container for the messages. A session will have a unique id and name.</p> Source code in <code>src/project/database/Session.py</code> <pre><code>class Session:\n    \"\"\"\n    Class to define the session.\n    Session act as a container for the messages. A session will have a unique id and name.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Constructor to initialize the session.\n        \"\"\"\n        self.__session_id = current_milli_time()\n        self.__session_name = formate_time(self.__session_id)\n        self.__messages = []\n\n    def get_session_id(self) -&gt; int:\n        \"\"\"Get the session id.\n\n        Returns:\n            int: Session id\n        \"\"\"\n        return self.__session_id\n\n    def get_session_name(self) -&gt; str:\n        \"\"\"Get the session name.\n\n        Returns:\n            str: Session name\n        \"\"\"\n        return self.__session_name\n\n    def update_message(self, message=None):\n        \"\"\"Update the messages.\n\n        Args:\n            message (list, optional): List of messages. Defaults to None.\n        \"\"\"\n        if message is None:\n            message = []\n        self.__messages = message\n\n    def get_messages(self) -&gt; list[Message]:\n        \"\"\"Get the session name.\n\n        Returns:\n            list[Message]: Get the list of messages\n        \"\"\"\n        return self.__messages\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Session.__init__","title":"<code>__init__()</code>","text":"<p>Constructor to initialize the session.</p> Source code in <code>src/project/database/Session.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Constructor to initialize the session.\n    \"\"\"\n    self.__session_id = current_milli_time()\n    self.__session_name = formate_time(self.__session_id)\n    self.__messages = []\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Session.get_messages","title":"<code>get_messages()</code>","text":"<p>Get the session name.</p> <p>Returns:</p> <ul> <li> <code>list[project.database.Session.Message]</code>         \u2013          <p>list[Message]: Get the list of messages</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def get_messages(self) -&gt; list[Message]:\n    \"\"\"Get the session name.\n\n    Returns:\n        list[Message]: Get the list of messages\n    \"\"\"\n    return self.__messages\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Session.get_session_id","title":"<code>get_session_id()</code>","text":"<p>Get the session id.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>Session id</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def get_session_id(self) -&gt; int:\n    \"\"\"Get the session id.\n\n    Returns:\n        int: Session id\n    \"\"\"\n    return self.__session_id\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Session.get_session_name","title":"<code>get_session_name()</code>","text":"<p>Get the session name.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Session name</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def get_session_name(self) -&gt; str:\n    \"\"\"Get the session name.\n\n    Returns:\n        str: Session name\n    \"\"\"\n    return self.__session_name\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.Session.update_message","title":"<code>update_message(message=None)</code>","text":"<p>Update the messages.</p> <p>Parameters:</p> <ul> <li> <code>message</code>             (<code>list</code>, default:                 <code>None</code> )         \u2013          <p>List of messages. Defaults to None.</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def update_message(self, message=None):\n    \"\"\"Update the messages.\n\n    Args:\n        message (list, optional): List of messages. Defaults to None.\n    \"\"\"\n    if message is None:\n        message = []\n    self.__messages = message\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.convert_to_markdown","title":"<code>convert_to_markdown(session)</code>","text":"<p>Function to convert the session to markdown.</p> <p>Parameters:</p> <ul> <li> <code>session</code>             (<code>project.database.Session.Session</code>)         \u2013          <p>Session to be converted to markdown.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Markdown text</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def convert_to_markdown(session: Session) -&gt; str:\n    \"\"\"Function to convert the session to markdown.\n\n    Args:\n        session (Session): Session to be converted to markdown.\n\n    Returns:\n        str: Markdown text\n    \"\"\"\n    markdown = '# ' + 'HelperBot\\n\\n'\n    markdown += f'## {session.get_session_name()}\\n\\n'\n    for message in session.get_messages():\n        if message.get_role() == Role.MODEL:\n            markdown += message.get_content() + '\\n'\n        else:\n            markdown += '### ' + message.get_content() + '\\n'\n    markdown += '\\n\\n'\n    markdown += '---'\n    markdown += '\\n\\n'\n    # markdown += '\\n\\n'\n    # markdown += 'Developed by [SHAKYA](https://www.github.com/shakya1527)'\n    # markdown += '\\n\\n'\n    markdown += 'Get the code on [GitHub](https://github.com/shakya1527/HelperBot)'\n\n    return to_markdown(markdown).data\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.map_message_list_to_history","title":"<code>map_message_list_to_history(messages)</code>","text":"<p>Function to map the message list to history. Give a list of messages and return the history mentioned in https://ai.google.dev/tutorials/python_quickstart .</p> <p>Parameters:</p> <ul> <li> <code>messages</code>             (<code>list[project.database.Session.Message]</code>)         \u2013          <p>List of messages</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>         \u2013          <p>list[dict]: converted history</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def map_message_list_to_history(messages: list[Message]) -&gt; list[dict]:\n    \"\"\"Function to map the message list to history.\n    Give a list of messages and return the history mentioned in https://ai.google.dev/tutorials/python_quickstart .\n\n    Args:\n        messages (list[Message]): List of messages\n\n    Returns:\n        list[dict]: converted history\n    \"\"\"\n    return [{'role': message.get_role().name.lower(), 'parts': [message.get_content()]} for message in messages]\n</code></pre>"},{"location":"reference/project/database/Session/#project.database.Session.to_markdown","title":"<code>to_markdown(text)</code>","text":"<p>Convert the text to markdown.</p> <p>Parameters:</p> <ul> <li> <code>text</code>             (<code>str</code>)         \u2013          <p>Text to be converted to markdown.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markdown</code> (            <code>IPython.core.display.Markdown</code> )        \u2013          <p>Markdown text</p> </li> </ul> Source code in <code>src/project/database/Session.py</code> <pre><code>def to_markdown(text: str) -&gt; Markdown:\n    \"\"\"Convert the text to markdown.\n\n    Args:\n        text (str): Text to be converted to markdown.\n\n    Returns:\n        Markdown: Markdown text\n    \"\"\"\n    text = text.replace('\u2022', '  *')\n    return Markdown(textwrap.indent(text, '&gt; ', predicate=lambda _: True))\n</code></pre>"},{"location":"reference/project/database/utils/","title":"utils","text":""},{"location":"reference/project/database/utils/#project.database.utils.Links","title":"<code>Links</code>","text":"<p>             Bases: <code>enum.Enum</code></p> <p>Enum to define the links.</p> Source code in <code>src/project/database/utils.py</code> <pre><code>class Links(Enum):\n    \"\"\"Enum to define the links.\n    \"\"\"\n    GITHUB = 'https://github.com/shakya1527/HelperBot'\n    GEMINI = 'https://ai.google.dev/'\n    STREAMLIT = 'https://streamlit.io/'\n    MD_PDF = 'https://pypi.org/project/mdpdf/'\n    PYTHON = 'https://www.python.org/'\n    SHAKYA = 'https://www.github.com/shakya1527'\n</code></pre>"},{"location":"reference/project/database/utils/#project.database.utils.States","title":"<code>States</code>","text":"<p>             Bases: <code>enum.Enum</code></p> <p>Enum to define the state keys for the session state.</p> Source code in <code>src/project/database/utils.py</code> <pre><code>class States(Enum):\n    \"\"\"Enum to define the state keys for the session state.\n    \"\"\"\n    DATABASE_STATE = 'database_state'\n    CURRENT_SESSION = 'current_session'\n    IS_CHAT_HISTORY_EXPANDABLE = 'is_chat_history_expandable'\n    IS_CREATE_NEW_SESSION_ENABLED = 'is_create_new_session_enabled'\n</code></pre>"},{"location":"reference/project/database/utils/#project.database.utils.current_milli_time","title":"<code>current_milli_time()</code>","text":"<p>Get the current time in milliseconds.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>Current time in milliseconds</p> </li> </ul> Source code in <code>src/project/database/utils.py</code> <pre><code>def current_milli_time()-&gt;int:\n    \"\"\"Get the current time in milliseconds.\n\n    Returns:\n        int: Current time in milliseconds\n    \"\"\"\n    return round(time.time() * 1000)\n</code></pre>"},{"location":"reference/project/database/utils/#project.database.utils.formate_time","title":"<code>formate_time(time_stamp)</code>","text":"<p>Format the given time stamp to the given format.</p> <p>Parameters:</p> <ul> <li> <code>time_stamp</code>             (<code>int</code>)         \u2013          <p>Time stamp to format</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Formatted time</p> </li> </ul> Source code in <code>src/project/database/utils.py</code> <pre><code>def formate_time(time_stamp:int)-&gt;str:\n    \"\"\"Format the given time stamp to the given format.\n\n    Args:\n        time_stamp (int): Time stamp to format\n\n    Returns:\n        str: Formatted time\n    \"\"\"\n    return datetime.fromtimestamp(time_stamp / 1000.0).strftime(\"%d %b %y %I:%M:%S %pages\")\n</code></pre>"},{"location":"reference/project/export/MarkdownToPdf/","title":"MarkdownToPdf","text":""},{"location":"reference/project/export/MarkdownToPdf/#project.export.MarkdownToPdf.Export","title":"<code>Export</code>","text":"<p>Export is a class that contains methods to export content to different formats. Initially, it supports exporting content to PDF.</p> Source code in <code>src/project/export/MarkdownToPdf.py</code> <pre><code>class Export:\n    \"\"\"Export is a class that contains methods to export content to different formats.\n    Initially, it supports exporting content to PDF.\n    \"\"\"\n\n    @staticmethod\n    def export_to_pdf(content: str, container: st.container = None, name: str = 'export.pdf'):\n        \"\"\"Exports the given content to PDF.\n\n        Args:\n            content (str): Markdown content to export.\n            container (st.container, optional): Parent container to display the download button. Defaults to None.\n            name (str, optional): Name of the PDF file. Defaults to 'export.pdf'.\n        \"\"\"\n        with open('./src/project/export/mktopdf.md', 'w', encoding='utf-8') as f:\n            f.write(content)\n        command = [\"mdpdf\", \"-o\", \"./src/project/export/export.pdf\", \"./src/project/export/mktopdf.md\"]\n        try:\n            subprocess.run(command, check=True)\n            if container is not None:\n                container.success(\"PDF created successfully\")\n                with open('./src/project/export/export.pdf', 'rb') as f:\n                    container.download_button(\n                        label=\"Download PDF\",\n                        data=f,\n                        file_name=name,\n                        mime='application/pdf'\n                    )\n                os.remove('./src/project/export/mktopdf.md')\n                os.remove('./src/project/export/export.pdf')\n        except subprocess.CalledProcessError as e:\n            if container is not None:\n                container.error(\"An error occurred while creating PDF\")\n                container.error(e)\n</code></pre>"},{"location":"reference/project/export/MarkdownToPdf/#project.export.MarkdownToPdf.Export.export_to_pdf","title":"<code>export_to_pdf(content, container=None, name='export.pdf')</code>  <code>staticmethod</code>","text":"<p>Exports the given content to PDF.</p> <p>Parameters:</p> <ul> <li> <code>content</code>             (<code>str</code>)         \u2013          <p>Markdown content to export.</p> </li> <li> <code>container</code>             (<code>streamlit.container</code>, default:                 <code>None</code> )         \u2013          <p>Parent container to display the download button. Defaults to None.</p> </li> <li> <code>name</code>             (<code>str</code>, default:                 <code>'export.pdf'</code> )         \u2013          <p>Name of the PDF file. Defaults to 'export.pdf'.</p> </li> </ul> Source code in <code>src/project/export/MarkdownToPdf.py</code> <pre><code>@staticmethod\ndef export_to_pdf(content: str, container: st.container = None, name: str = 'export.pdf'):\n    \"\"\"Exports the given content to PDF.\n\n    Args:\n        content (str): Markdown content to export.\n        container (st.container, optional): Parent container to display the download button. Defaults to None.\n        name (str, optional): Name of the PDF file. Defaults to 'export.pdf'.\n    \"\"\"\n    with open('./src/project/export/mktopdf.md', 'w', encoding='utf-8') as f:\n        f.write(content)\n    command = [\"mdpdf\", \"-o\", \"./src/project/export/export.pdf\", \"./src/project/export/mktopdf.md\"]\n    try:\n        subprocess.run(command, check=True)\n        if container is not None:\n            container.success(\"PDF created successfully\")\n            with open('./src/project/export/export.pdf', 'rb') as f:\n                container.download_button(\n                    label=\"Download PDF\",\n                    data=f,\n                    file_name=name,\n                    mime='application/pdf'\n                )\n            os.remove('./src/project/export/mktopdf.md')\n            os.remove('./src/project/export/export.pdf')\n    except subprocess.CalledProcessError as e:\n        if container is not None:\n            container.error(\"An error occurred while creating PDF\")\n            container.error(e)\n</code></pre>"},{"location":"reference/project/gemini/Gemini/","title":"Gemini","text":""},{"location":"reference/project/gemini/Gemini/#project.gemini.Gemini.Gemini","title":"<code>Gemini</code>","text":"<p>Gemini is a class that uses the Gemini API to generate responses to messages. Docs: - https://ai.google.dev/tutorials/python_quickstart</p> Source code in <code>src/project/gemini/Gemini.py</code> <pre><code>class Gemini:\n    \"\"\"Gemini is a class that uses the Gemini API to generate responses to messages.\n    Docs: - https://ai.google.dev/tutorials/python_quickstart\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the Gemini API with the API key from the environment variables.\n        \"\"\"\n        google_api_key = os.getenv('GEMINI_KEY')\n        genai.configure(api_key=google_api_key)\n        self.__model = genai.GenerativeModel('gemini-pro')\n        self.__chat = self.__model.start_chat(history=[])\n\n    def start_new_chat(self, m_list:list[dict]=None):\n        \"\"\"Start a new chat with the given message list.\n\n        Args:\n            m_list (list[dict], optional): Chat history. Defaults to None.\n        \"\"\"\n        if m_list is None:\n            m_list = []\n        self.__chat = genai.GenerativeModel('gemini-pro').start_chat(\n            history=map_message_list_to_history(m_list)\n        )\n\n    def send_message(self, message: str, role: Role) -&gt; Message:\n        \"\"\"Sends a message to the Gemini API and returns the response.\n\n        Args:\n            message (str): Message to send.\n            role (Role): Role of the message sender.\n\n        Returns:\n            Message: Response from the Gemini API mapped to the Message class.\n        \"\"\"\n        response = self.__chat.send_message({'role': role.name.lower(), 'parts': [message]})\n        return Message(\n            role=Role.MODEL,\n            content=Gemini.to_markdown(response.parts[0].text).data\n        )\n\n    def summaries(self, url:str) -&gt; Markdown:\n        \"\"\"Summarizes the content of the given URL.\n\n        Args:\n            url (str): Url to summarize.\n\n        Returns:\n            Markdown: Markdown formatted summary of the content.\n        \"\"\"\n        prompt = f'''Summarize the following url in elaborately as possible.\n        {url}\n        '''\n        response = self.__model.generate_content(prompt)\n        return Gemini.to_markdown(response.text)\n\n    @staticmethod\n    def to_markdown(text:str)-&gt;Markdown:\n        \"\"\"Converts the given text to Markdown format.\n\n        Args:\n            text (str): Text to convert.\n\n        Returns:\n            Markdown: Markdown formatted text.\n        \"\"\"\n        text = text.replace('\u2022', '  *')\n        return Markdown(textwrap.indent(text, '&gt; ', predicate=lambda _: True))\n</code></pre>"},{"location":"reference/project/gemini/Gemini/#project.gemini.Gemini.Gemini.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the Gemini API with the API key from the environment variables.</p> Source code in <code>src/project/gemini/Gemini.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the Gemini API with the API key from the environment variables.\n    \"\"\"\n    google_api_key = os.getenv('GEMINI_KEY')\n    genai.configure(api_key=google_api_key)\n    self.__model = genai.GenerativeModel('gemini-pro')\n    self.__chat = self.__model.start_chat(history=[])\n</code></pre>"},{"location":"reference/project/gemini/Gemini/#project.gemini.Gemini.Gemini.send_message","title":"<code>send_message(message, role)</code>","text":"<p>Sends a message to the Gemini API and returns the response.</p> <p>Parameters:</p> <ul> <li> <code>message</code>             (<code>str</code>)         \u2013          <p>Message to send.</p> </li> <li> <code>role</code>             (<code>database.Session.Role</code>)         \u2013          <p>Role of the message sender.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Message</code> (            <code>database.Session.Message</code> )        \u2013          <p>Response from the Gemini API mapped to the Message class.</p> </li> </ul> Source code in <code>src/project/gemini/Gemini.py</code> <pre><code>def send_message(self, message: str, role: Role) -&gt; Message:\n    \"\"\"Sends a message to the Gemini API and returns the response.\n\n    Args:\n        message (str): Message to send.\n        role (Role): Role of the message sender.\n\n    Returns:\n        Message: Response from the Gemini API mapped to the Message class.\n    \"\"\"\n    response = self.__chat.send_message({'role': role.name.lower(), 'parts': [message]})\n    return Message(\n        role=Role.MODEL,\n        content=Gemini.to_markdown(response.parts[0].text).data\n    )\n</code></pre>"},{"location":"reference/project/gemini/Gemini/#project.gemini.Gemini.Gemini.start_new_chat","title":"<code>start_new_chat(m_list=None)</code>","text":"<p>Start a new chat with the given message list.</p> <p>Parameters:</p> <ul> <li> <code>m_list</code>             (<code>list[dict]</code>, default:                 <code>None</code> )         \u2013          <p>Chat history. Defaults to None.</p> </li> </ul> Source code in <code>src/project/gemini/Gemini.py</code> <pre><code>def start_new_chat(self, m_list:list[dict]=None):\n    \"\"\"Start a new chat with the given message list.\n\n    Args:\n        m_list (list[dict], optional): Chat history. Defaults to None.\n    \"\"\"\n    if m_list is None:\n        m_list = []\n    self.__chat = genai.GenerativeModel('gemini-pro').start_chat(\n        history=map_message_list_to_history(m_list)\n    )\n</code></pre>"},{"location":"reference/project/gemini/Gemini/#project.gemini.Gemini.Gemini.summaries","title":"<code>summaries(url)</code>","text":"<p>Summarizes the content of the given URL.</p> <p>Parameters:</p> <ul> <li> <code>url</code>             (<code>str</code>)         \u2013          <p>Url to summarize.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markdown</code> (            <code>IPython.display.Markdown</code> )        \u2013          <p>Markdown formatted summary of the content.</p> </li> </ul> Source code in <code>src/project/gemini/Gemini.py</code> <pre><code>def summaries(self, url:str) -&gt; Markdown:\n    \"\"\"Summarizes the content of the given URL.\n\n    Args:\n        url (str): Url to summarize.\n\n    Returns:\n        Markdown: Markdown formatted summary of the content.\n    \"\"\"\n    prompt = f'''Summarize the following url in elaborately as possible.\n    {url}\n    '''\n    response = self.__model.generate_content(prompt)\n    return Gemini.to_markdown(response.text)\n</code></pre>"},{"location":"reference/project/gemini/Gemini/#project.gemini.Gemini.Gemini.to_markdown","title":"<code>to_markdown(text)</code>  <code>staticmethod</code>","text":"<p>Converts the given text to Markdown format.</p> <p>Parameters:</p> <ul> <li> <code>text</code>             (<code>str</code>)         \u2013          <p>Text to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markdown</code> (            <code>IPython.display.Markdown</code> )        \u2013          <p>Markdown formatted text.</p> </li> </ul> Source code in <code>src/project/gemini/Gemini.py</code> <pre><code>@staticmethod\ndef to_markdown(text:str)-&gt;Markdown:\n    \"\"\"Converts the given text to Markdown format.\n\n    Args:\n        text (str): Text to convert.\n\n    Returns:\n        Markdown: Markdown formatted text.\n    \"\"\"\n    text = text.replace('\u2022', '  *')\n    return Markdown(textwrap.indent(text, '&gt; ', predicate=lambda _: True))\n</code></pre>"}]}